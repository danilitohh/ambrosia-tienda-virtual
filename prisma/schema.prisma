generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  phone            String?
  address          String?
  city             String?
  department       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  password         String?
  role             String?   @default("CUSTOMER")
  securityQuestion String?
  securityAnswer   String?
  accounts         Account[]
  sessions         Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id           String      @id @default(cuid())
  name         String
  description  String
  price        Decimal     @db.Decimal(10, 2)
  comparePrice Decimal?    @db.Decimal(10, 2)
  images       String[]
  sku          String      @unique
  isActive     Boolean     @default(true)
  isFeatured   Boolean     @default(false)
  slug         String      @unique
  weight       Float?
  dimensions   String?
  categoryId   String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  category     Category    @relation(fields: [categoryId], references: [id])
  promoCodes   PromoCode[]
}

model Settings {
  id                Int      @id @default(autoincrement())
  announcement      String
  announcementImage String?
  nequiNumber       String
  bancolombiaCuenta String
  bancolombiaQr     String?
  updatedAt         DateTime @updatedAt
}

model PromoCode {
  id              String    @id @default(cuid())
  code            String    @unique
  description     String
  discountPercent Int
  productId       String
  minQuantity     Int
  maxUses         Int?
  usedCount       Int       @default(0)
  isActive        Boolean   @default(true)
  expiresAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}
