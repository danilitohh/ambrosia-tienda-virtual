import { prisma } from '../src/lib/prisma';

async function testPasswordRecovery() {
  console.log('üß™ Probando sistema de recuperaci√≥n de contrase√±a...\n');

  try {
    // 1. Verificar usuarios existentes
    console.log('1. üìã Verificando usuarios en la base de datos...');
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        createdAt: true
      }
    });

    if (users.length === 0) {
      console.log('‚ùå No hay usuarios en la base de datos');
      return;
    }

    console.log(`‚úÖ Encontrados ${users.length} usuarios:`);
    users.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.name || 'Sin nombre'} (${user.email}) - ID: ${user.id}`);
    });

    // 2. Verificar tokens de recuperaci√≥n existentes (omitido: modelo passwordResetToken no existe)
    // console.log('\n2. üîë Verificando tokens de recuperaci√≥n existentes...');
    // const existingTokens = await prisma.passwordResetToken.findMany({
    //   include: {
    //     user: {
    //       select: {
    //         email: true,
    //         name: true
    //       }
    //     }
    //   }
    // });
    // if (existingTokens.length > 0) {
    //   console.log(`‚ö†Ô∏è  Encontrados ${existingTokens.length} tokens de recuperaci√≥n:`);
    //   existingTokens.forEach((token, index) => {
    //     const isExpired = token.expires < new Date();
    //     console.log(`   ${index + 1}. Usuario: ${token.user.name || 'Sin nombre'} (${token.user.email})`);
    //     console.log(`      Token: ${token.token.substring(0, 20)}...`);
    //     console.log(`      Expira: ${token.expires.toLocaleString()} ${isExpired ? '‚ùå EXPIRADO' : '‚úÖ V√ÅLIDO'}`);
    //   });
    // } else {
    //   console.log('‚úÖ No hay tokens de recuperaci√≥n activos');
    // }

    // 3. Probar b√∫squeda de usuario por email
    console.log('\n3. üîç Probando b√∫squeda de usuario por email...');
    const testEmail = users[0].email;
    console.log(`   Probando con email: ${testEmail}`);

    const foundUser = await prisma.user.findFirst({
      where: {
        email: {
          equals: testEmail,
          mode: 'insensitive'
        }
      }
    });

    if (foundUser) {
      console.log(`‚úÖ Usuario encontrado: ${foundUser.name || 'Sin nombre'} (${foundUser.email})`);
    } else {
      console.log('‚ùå Usuario no encontrado');
    }

    // 4. Verificar configuraci√≥n de email
    console.log('\n4. üìß Verificando configuraci√≥n de email...');
    const emailConfig = {
      RESEND_API_KEY: process.env.RESEND_API_KEY ? '‚úÖ Configurado' : '‚ùå No configurado',
      EMAIL_FROM: process.env.EMAIL_FROM ? '‚úÖ Configurado' : '‚ùå No configurado',
      NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL ? '‚úÖ Configurado' : '‚ùå No configurado'
    };

    Object.entries(emailConfig).forEach(([key, status]) => {
      console.log(`   ${key}: ${status}`);
    });

    // 5. Recomendaciones
    console.log('\n5. üí° Recomendaciones:');
    
    if (users.some(u => !u.email || u.email.trim() === '')) {
      console.log('   ‚ö†Ô∏è  Algunos usuarios no tienen email configurado');
      console.log('   üí° Considera actualizar estos usuarios con emails v√°lidos');
    }

    if (!process.env.RESEND_API_KEY) {
      console.log('   ‚ö†Ô∏è  RESEND_API_KEY no est√° configurado');
      console.log('   üí° Configura la variable de entorno para enviar emails');
    }

    if (!process.env.EMAIL_FROM) {
      console.log('   ‚ö†Ô∏è  EMAIL_FROM no est√° configurado');
      console.log('   üí° Configura el email remitente en las variables de entorno');
    }

    console.log('\n‚úÖ Prueba completada exitosamente');

  } catch (error) {
    console.error('‚ùå Error durante la prueba:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testPasswordRecovery(); 