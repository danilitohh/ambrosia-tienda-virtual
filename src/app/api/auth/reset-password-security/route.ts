import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import bcrypt from "bcryptjs";

export const dynamic = 'force-dynamic';
export const runtime = 'nodejs';

export async function POST(request: NextRequest) {
  try {
    const { email, newPassword } = await request.json();
    
    console.log('üîç Actualizando contrase√±a para:', email);
    
    if (!email || !newPassword) {
      return NextResponse.json({ 
        error: 'Email y nueva contrase√±a son requeridos.' 
      }, { status: 400 });
    }
    
    // Validar longitud de contrase√±a
    if (newPassword.length < 6) {
      return NextResponse.json({ 
        error: 'La contrase√±a debe tener al menos 6 caracteres.' 
      }, { status: 400 });
    }
    
    // Buscar usuario por email
    const user = await prisma.user.findFirst({
      where: {
        email: {
          equals: email,
          mode: 'insensitive'
        }
      }
    });
    
    if (!user) {
      console.log('Usuario no encontrado:', email);
      return NextResponse.json({ 
        error: 'No se encontr√≥ una cuenta con ese email.' 
      }, { status: 404 });
    }
    
    console.log('‚úÖ Usuario encontrado:', user.email);
    
    console.log('‚úÖ Usuario encontrado, procediendo a actualizar contrase√±a');
    
    // Hashear nueva contrase√±a
    const hashedPassword = await bcrypt.hash(newPassword, 12);
    
    // Actualizar contrase√±a
    await prisma.user.update({
      where: { id: user.id },
      data: { password: hashedPassword }
    });
    
    console.log('‚úÖ Contrase√±a actualizada exitosamente');
    
    return NextResponse.json({ 
      success: true,
      message: 'Contrase√±a actualizada correctamente.' 
    });
    
  } catch (error) {
    console.error('Error en reset-password-security:', error);
    return NextResponse.json({ 
      error: 'Ocurri√≥ un error al actualizar la contrase√±a.' 
    }, { status: 500 });
  }
} 