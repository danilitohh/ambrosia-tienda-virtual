"use client"

import { useState } from "react"
import { signIn } from "next-auth/react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { Mail, Lock, Eye, EyeOff, User, Shield, Phone, ChevronDown, Globe } from "lucide-react"

export default function SignUp() {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
    confirmPassword: "",
    countryCode: "+57",
    phone: "",
    securityQuestion: "",
    securityAnswer: "",
  })
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState("")
  const router = useRouter()

  const securityQuestions = [
    "Â¿CuÃ¡l es el nombre de tu primera mascota?",
    "Â¿En quÃ© ciudad naciste?",
    "Â¿CuÃ¡l es el nombre de tu madre?",
    "Â¿CuÃ¡l es tu color favorito?",
    "Â¿CuÃ¡l es el nombre de tu mejor amigo de la infancia?"
  ]

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    })
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError("")

    if (formData.password !== formData.confirmPassword) {
      setError("Las contraseÃ±as no coinciden")
      setIsLoading(false)
      return
    }

    if (formData.password.length < 6) {
      setError("La contraseÃ±a debe tener al menos 6 caracteres")
      setIsLoading(false)
      return
    }

    if (!formData.phone.trim()) {
      setError("El nÃºmero de telÃ©fono es requerido")
      setIsLoading(false)
      return
    }

    // Validar formato de telÃ©fono (solo nÃºmeros)
    if (!/^\d{10}$/.test(formData.phone.trim())) {
      setError("El telÃ©fono debe tener 10 dÃ­gitos (sin incluir el cÃ³digo de paÃ­s)")
      setIsLoading(false)
      return
    }

    if (!formData.securityQuestion || !formData.securityAnswer.trim()) {
      setError("La pregunta de seguridad y su respuesta son requeridas")
      setIsLoading(false)
      return
    }

    try {
      const response = await fetch("/api/auth/register", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: formData.name,
          email: formData.email,
          password: formData.password,
          phone: formData.countryCode + formData.phone,
          securityQuestion: formData.securityQuestion,
          securityAnswer: formData.securityAnswer,
        }),
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.message || "Error al registrar usuario")
      }

      // Auto sign in after successful registration
      await signIn("credentials", {
        email: formData.email,
        password: formData.password,
        redirect: false,
      })

      router.push("/")
    } catch (error) {
      setError(error instanceof Error ? error.message : "OcurriÃ³ un error. IntÃ©ntalo de nuevo.")
    } finally {
      setIsLoading(false)
    }
  }

  const handleGoogleSignUp = () => {
    signIn("google", { callbackUrl: "/" })
  }

  return (
    <div className="min-h-screen bg-black flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <Link href="/" className="text-3xl font-bold text-[#C6FF00] text-center block">
            Ambrosia
          </Link>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-white">
            Crea tu cuenta
          </h2>
          <p className="mt-2 text-center text-sm text-gray-400">
            Â¿Ya tienes una cuenta?{" "}
            <Link href="/auth/signin" className="font-medium text-[#C6FF00] hover:text-[#b2e600]">
              Inicia sesiÃ³n aquÃ­
            </Link>
          </p>
        </div>
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-300">
                Nombre completo
              </label>
              <div className="mt-1 relative">
                <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <input
                  id="name"
                  name="name"
                  type="text"
                  autoComplete="name"
                  required
                  value={formData.name}
                  onChange={handleChange}
                  className="appearance-none relative block w-full pl-10 pr-3 py-2 border border-gray-600 placeholder-gray-400 text-white bg-gray-700 rounded-md focus:outline-none focus:ring-[#C6FF00] focus:border-[#C6FF00] focus:z-10 sm:text-sm"
                  placeholder="Tu nombre completo"
                />
              </div>
            </div>
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-300">
                Correo electrÃ³nico
              </label>
              <div className="mt-1 relative">
                <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <input
                  id="email"
                  name="email"
                  type="email"
                  autoComplete="email"
                  required
                  value={formData.email}
                  onChange={handleChange}
                  className="appearance-none relative block w-full pl-10 pr-3 py-2 border border-gray-600 placeholder-gray-400 text-white bg-gray-700 rounded-md focus:outline-none focus:ring-[#C6FF00] focus:border-[#C6FF00] focus:z-10 sm:text-sm"
                  placeholder="tu@email.com"
                />
              </div>
            </div>
            <div>
              <label htmlFor="phone" className="block text-sm font-medium text-gray-300">
                NÃºmero de telÃ©fono
              </label>
              <div className="mt-1 flex">
                <div className="relative flex-shrink-0">
                  <Globe className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                  <select
                    name="countryCode"
                    value={formData.countryCode}
                    onChange={handleChange}
                    className="appearance-none relative block w-20 pl-10 pr-8 py-2 border border-gray-600 text-white bg-gray-700 rounded-l-md focus:outline-none focus:ring-[#C6FF00] focus:border-[#C6FF00] focus:z-10 sm:text-sm cursor-pointer"
                  >
                    <option value="+57">ðŸ‡¨ðŸ‡´ +57</option>
                    <option value="+1">ðŸ‡ºðŸ‡¸ +1</option>
                    <option value="+34">ðŸ‡ªðŸ‡¸ +34</option>
                    <option value="+52">ðŸ‡²ðŸ‡½ +52</option>
                    <option value="+54">ðŸ‡¦ðŸ‡· +54</option>
                    <option value="+55">ðŸ‡§ðŸ‡· +55</option>
                    <option value="+56">ðŸ‡¨ðŸ‡± +56</option>
                    <option value="+58">ðŸ‡»ðŸ‡ª +58</option>
                    <option value="+593">ðŸ‡ªðŸ‡¨ +593</option>
                    <option value="+51">ðŸ‡µðŸ‡ª +51</option>
                  </select>
                  <ChevronDown className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 h-3 w-3 pointer-events-none" />
                </div>
                <div className="relative flex-1">
                  <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                  <input
                    id="phone"
                    name="phone"
                    type="tel"
                    autoComplete="tel"
                    required
                    value={formData.phone}
                    onChange={handleChange}
                    className="appearance-none relative block w-full pl-10 pr-3 py-2 border border-l-0 border-gray-600 placeholder-gray-400 text-white bg-gray-700 rounded-r-md focus:outline-none focus:ring-[#C6FF00] focus:border-[#C6FF00] focus:z-10 sm:text-sm"
                    placeholder="3001234567"
                    maxLength={10}
                  />
                </div>
              </div>
              <p className="mt-1 text-xs text-gray-400">
                Solo nÃºmeros, sin incluir el cÃ³digo de paÃ­s
              </p>
            </div>
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-300">
                ContraseÃ±a
              </label>
              <div className="mt-1 relative">
                <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <input
                  id="password"
                  name="password"
                  type={showPassword ? "text" : "password"}
                  autoComplete="new-password"
                  required
                  value={formData.password}
                  onChange={handleChange}
                  className="appearance-none relative block w-full pl-10 pr-10 py-2 border border-gray-600 placeholder-gray-400 text-white bg-gray-700 rounded-md focus:outline-none focus:ring-[#C6FF00] focus:border-[#C6FF00] focus:z-10 sm:text-sm"
                  placeholder="MÃ­nimo 6 caracteres"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-300"
                >
                  {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                </button>
              </div>
            </div>
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-300">
                Confirmar contraseÃ±a
              </label>
              <div className="mt-1 relative">
                <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  autoComplete="new-password"
                  required
                  value={formData.confirmPassword}
                  onChange={handleChange}
                  className="appearance-none relative block w-full pl-10 pr-10 py-2 border border-gray-600 placeholder-gray-400 text-white bg-gray-700 rounded-md focus:outline-none focus:ring-[#C6FF00] focus:border-[#C6FF00] focus:z-10 sm:text-sm"
                  placeholder="Confirma tu contraseÃ±a"
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-300"
                >
                  {showConfirmPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                </button>
              </div>
            </div>
            
            {/* Pregunta de Seguridad */}
            <div>
              <label htmlFor="securityQuestion" className="block text-sm font-medium text-gray-300">
                Pregunta de seguridad
              </label>
              <div className="mt-1 relative">
                <Shield className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <ChevronDown className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4 pointer-events-none" />
                <select
                  id="securityQuestion"
                  name="securityQuestion"
                  required
                  value={formData.securityQuestion}
                  onChange={handleChange}
                  className="appearance-none relative block w-full pl-10 pr-10 py-2 border border-gray-600 text-white bg-gray-700 rounded-md focus:outline-none focus:ring-[#C6FF00] focus:border-[#C6FF00] focus:z-10 sm:text-sm cursor-pointer"
                >
                  <option value="">Selecciona una pregunta</option>
                  {securityQuestions.map((question, index) => (
                    <option key={index} value={question}>
                      {question}
                    </option>
                  ))}
                </select>
              </div>
            </div>
            
            <div>
              <label htmlFor="securityAnswer" className="block text-sm font-medium text-gray-300">
                Respuesta de seguridad
              </label>
              <div className="mt-1 relative">
                <Shield className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <input
                  id="securityAnswer"
                  name="securityAnswer"
                  type="text"
                  required
                  value={formData.securityAnswer}
                  onChange={handleChange}
                  className="appearance-none relative block w-full pl-10 pr-3 py-2 border border-gray-600 placeholder-gray-400 text-white bg-gray-700 rounded-md focus:outline-none focus:ring-[#C6FF00] focus:border-[#C6FF00] focus:z-10 sm:text-sm"
                  placeholder="Tu respuesta"
                />
              </div>
            </div>
          </div>

          {error && (
            <div className="bg-red-900 border border-red-700 text-red-200 px-4 py-3 rounded-md text-sm">
              {error}
            </div>
          )}

          <div className="flex items-center">
            <input
              id="agree-terms"
              name="agree-terms"
              type="checkbox"
              required
              className="h-4 w-4 text-[#C6FF00] focus:ring-[#C6FF00] border-gray-600 rounded bg-gray-700"
            />
            <label htmlFor="agree-terms" className="ml-2 block text-sm text-gray-300">
              Acepto los{" "}
              <Link href="/terms" className="text-[#C6FF00] hover:text-[#b2e600]">
                tÃ©rminos y condiciones
              </Link>{" "}
              y la{" "}
              <Link href="/privacy" className="text-[#C6FF00] hover:text-[#b2e600]">
                polÃ­tica de privacidad
              </Link>
            </label>
          </div>

          <div>
            <button
              type="submit"
              disabled={isLoading}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-black bg-[#C6FF00] hover:bg-[#b2e600] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#C6FF00] disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isLoading ? "Creando cuenta..." : "Crear cuenta"}
            </button>
          </div>

          <div className="mt-6">
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-600" />
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-2 bg-gray-900 text-gray-400">O regÃ­strate con</span>
              </div>
            </div>

            <div className="mt-6">
              <button
                type="button"
                onClick={handleGoogleSignUp}
                className="w-full inline-flex justify-center py-2 px-4 border border-[#C6FF00] rounded-md shadow-sm bg-gray-700 text-sm font-medium text-white hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#C6FF00]"
              >
                <svg className="w-5 h-5" viewBox="0 0 24 24">
                  <path
                    fill="currentColor"
                    d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                  />
                  <path
                    fill="currentColor"
                    d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                  />
                  <path
                    fill="currentColor"
                    d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                  />
                  <path
                    fill="currentColor"
                    d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                  />
                </svg>
                <span className="ml-2">Continuar con Google</span>
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  )
} 